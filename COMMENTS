1. https://github.com/poludnev/frontend-project-lvl2/blob/6321c32aef731593c0523cb39d113e10593a3bc8/.eslintrc.json#L3

 Поддержка браузера всё ещё не требуется. Приложение работает в консоли

fixed

2. https://github.com/poludnev/frontend-project-lvl2/blob/6321c32aef731593c0523cb39d113e10593a3bc8/__tests__/init.test.js#L19-L28

Не стоит оставлять артефакты в готовом пакете.

fixed

3. https://github.com/poludnev/frontend-project-lvl2/blob/6321c32aef731593c0523cb39d113e10593a3bc8/src/parser.js#L5

Парсер ничего не знает о файловой структуре и вообще о том, мы получаем данные. Например, при расширении функционала программа может их получать по сети. Парсеру нужны уже готовые данные и формат, на основе которого их нужно обработать.

fixed

4. https://github.com/poludnev/frontend-project-lvl2/blob/6321c32aef731593c0523cb39d113e10593a3bc8/src/formatter.js#L4-L78

Будет лучше реализовать каждый вывод (форматер) в отдельном модуле. В будущем список может расширятся и так будет удобно добавлять новые форматеры.

И, наконец, будет логично сделать точкой входа отдельный модуль gendiff (например).

fixed

5. https://github.com/poludnev/frontend-project-lvl2/blob/6321c32aef731593c0523cb39d113e10593a3bc8/src/diff.js#L22

Именование – это всегда баланс. Можно попробовать имена, описывающие операции с более высокого уровня. Функция getConfigFilesDifference строит дифф на основе двух наборов данных. Также ей не важно, что данные получены из файла (parsedFile1). Например, мы можем сделать так:

const buildDiff = (data1, data2) => {
...
Попробуйте остальной код проанализировать точно так же.

fixed Попробовал пройтись по коду с этой точки зрения, но мне кажется, что мне прям надо ткнуть пальцем туда, где нужно исправить.

6. prettify README

fixed 
